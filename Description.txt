ETradeWepApi projesi .NET Core 6'da; n-Tier Architecture yapýsý ile ORM Toollarýndan EntitiyFramework ve CodeFirst Tekniðini kullanarak oluþturduðum E-ticaret Api projesidir.

Bu uygulama; , kullanýcýlarýn ürünlerle ilgili bilgileri alabildiði, yeni ürün ekleyebildiði ve varolan ürünleri güncelleyebildiði bir e-ticaret platformudur.

1.CodeFirst ORM tekniðiyle MySQL'de database oluþturuldu -> etradedb isminde 
  //User(N)- Product(1) Relationship kuruldu

2.EntityFramework kütüphaneleri ve MySql.Data kütüphanesi DataAccess ve Core katmanlarýna yüklendi.

3.Core Katmanýna --> IEntity,IDto,
	                 IEntityRepository (CRUD iþlemelerinin generic olarak oluþturuldu)
					 EfEntityRepositoryBase ((TEntity,TContext) hangi tablo, hangi veritabaný verillirse ona göre CRUD iþlemlerini yapacak base sýnýfý oluþturuldu.
					 Utilities klasörü altýna Results yapýlandýrmasý oluþturuldu.
					 Business katmanýna, Constants içine Messages.cs classý oluþturularak mesaj textleri yazýldý.
					 Paging klasöründe Sayfalama yapýsýnýn generic kýsmý oluþturuldu.

4. 
*.FluentValidation desteði eklendi.
	Kullanýcý adý boþ geçilemez,Password alaný en az sekiz karakter, en az bir harf ve bir sayý içermelidir... gibi kurallar verildi.
*.ActionFilter(.Net'in kendi DependencyEnjection özellliði)
*.Business-> DependencyResolvers ->DependecyEnjection.cs clasýnda "AddBusinessService" isminde extention methot oluþturuldu.Ve program.cs ye kullanaðý service "builder.Services.AddBusinessService()" eklendi.

5.Katmanlar oluþturuldu.
  Business katmanýna Service ve Managerlar oluþturuldu. DataAccess katmanýna Dal ve EfDal oluþturuldu.

6.Product ve User CRUD iþlemleri yapýldý.

7.Sayfalama yapýsý eklendi.
  Core katmanýnda-> Paging klasöründe sayfalama kýsmý generic olarak oluþturuldu.

8.BaseEntity oluþturuldu.Id alaný bütün Entitlerde ortak olduðundan generic yapýya taþýndý.

9.Jwt Authentication yapýsý oluþturuldu.
  * appsettings e Jwt configurationu  "TokenOptions" oluþturuldu.
  * Business katmanýnda ->Utilities ->Security klasörüne ->JWT klasörü oluþturuldu.Ýçine Helper metotlar oluþturuldu.

10. *Login olan kiþi database de varsa CreteToken metotuyla Jwt Token üretir.
    *program.cs ye JwtBearer service'i eklenerek JWT authentication yapýlandýrýlmasý yapýldý.
	*Autofac yapýsý oluþturuldu.Ama kullanmadým.Role vermediðim için [Authorize] attribute ý yeterli oldu.

11. * SecurityKeyHelper -> appsetting de oluþturduðumuz securityKey deðerini byte[] array formatýna çevirmek için CreateSecurityKey metotu oluþturuldu
  * SigningCredentialsHelper -> webApinin hangi anahtarý hangi þifreleme algoritmasýný kullanacaðýný söylediðimiz metot

  * AccessToken classý -> eriþim anahtarý // Token ve Expiration deðiþkenlerini tanýmlandý
  * ITokenHelper -> CreateToken metotu oluþturuldu (veritabanýndaki user ve claimlere göre JWT Token üretecek)
  * JwtHelper -> Jwt'nin oluþturulduðu class 
  * TokenOptions -> Configuration ile appsettings.json da okuduðu deðerleri atayacaðýmýz deðiþkenleri tanýmladýðým class

  *Extensions metot tanýmladým.Claimler için   
   * ClaimExtensions -> ClaimExtensions da tanýmladýðýmýz metotlarý JwtHelper.cs ýnda çaðýrýrýz
   * ClaimPrincipalExtensions -> Jwt den gelen claimlerini okumak için .Net deki "ClaimsPrincipal" clasýna Claims metotlarý eklendi
   * ServiceCollectionExtensions ->

   * Authorization (Yetkilnedirme) Aspectleri, Business katmanýna yazýldý
   BusinessAspect klasörü -> Autofac klasörü -> SecuredOperation.cs clasý oluþturuldu

   *!!! SecuredOperation -> Aspect olarak verceðimiz yetkilendirme metotu
   * ServicTool -> WebApi de oluuþturduðumuz Injectionlar gibi iliþkileri oluþturmamýzý saðlar.Aspecti Inject edebilmek için oluþturduðumuz bir ExtensionsMetottur

12. Login ve Register iþlemleri için ;
    IAuthService e kullanýlacak metotlar tanýmlanýr.UserLoginDto ve UserRegisterDto larý oluþturuldu.
    AuthManager kayýt olmak için gerekli operasyonlarý yazýyor

13.
Product kýsmýnda;
   Kullanýcý login olduktan sonra iþlem yapabiliyor.
   Bunun için; ProductController a [Authorize] attributeu koyuldu.
   Swagger da; login olunca oluþan token -> Authorize kýsmýna yapýþtýrýlýp, login olup, iþlemler öyle yapýldý.
   Ürün Listeleme,Ekleme,Güncelleme ve Silme iþlemlerinde tokendaki userId kullanýlanarak kontrol yapýldý. 
   
User kýsmýnda;
   Kullanýcý; listeleme,ekleme,güncelleme,silme kýsmýnda Authorize olma þartý yok.

14. Ürün listesinde ürün adýna göre filtreleme yapýldý.
    Core katmanýna GetByFilter isminde metot oluþturuldu.
	Dynamic classý oluþturup. Sort(çeþit) ve Filter fieldleri tanýmlandý.